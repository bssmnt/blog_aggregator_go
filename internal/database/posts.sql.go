// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPostByURL = `-- name: GetPostByURL :one
SELECT id, title, url, feed_id, published_at, created_at, updated_at, description
FROM posts
WHERE url = $1
  AND feed_id = $2 LIMIT 1
`

type GetPostByURLParams struct {
	Url    string
	FeedID uuid.UUID
}

func (q *Queries) GetPostByURL(ctx context.Context, arg GetPostByURLParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByURL, arg.Url, arg.FeedID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.FeedID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.title, posts.url, posts.feed_id, posts.published_at
FROM feed_follows
         JOIN posts ON feed_follows.feed_id = posts.feed_id
WHERE user_id = $1
ORDER BY posts.updated_at DESC LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsForUserRow struct {
	Title       string
	Url         string
	FeedID      uuid.UUID
	PublishedAt time.Time
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.Title,
			&i.Url,
			&i.FeedID,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :exec
INSERT INTO posts(id, title, url, feed_id, published_at, created_at, updated_at)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7) ON CONFLICT (url) DO
UPDATE SET
    title = EXCLUDED.title,
    published_at = EXCLUDED.published_at,
    updated_at = EXCLUDED.updated_at
`

type InsertPostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	FeedID      uuid.UUID
	PublishedAt time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.ExecContext(ctx, insertPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.FeedID,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
